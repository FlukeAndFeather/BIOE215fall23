[
  {
    "objectID": "lessons/01_comp_proj_org.html",
    "href": "lessons/01_comp_proj_org.html",
    "title": "Computational project organization",
    "section": "",
    "text": "Students will be able to:\n\nDescribe the relationship between RStudio project, git repo, and GitHub repo\nOrganize files and folders to maximize reproducibility and collaboration\nCreate a project website on GitHub"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#student-learning-objectives",
    "href": "lessons/01_comp_proj_org.html#student-learning-objectives",
    "title": "Computational project organization",
    "section": "",
    "text": "Students will be able to:\n\nDescribe the relationship between RStudio project, git repo, and GitHub repo\nOrganize files and folders to maximize reproducibility and collaboration\nCreate a project website on GitHub"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#todays-lesson",
    "href": "lessons/01_comp_proj_org.html#todays-lesson",
    "title": "Computational project organization",
    "section": "Today’s lesson",
    "text": "Today’s lesson\ntl;dr Each of your analyses should have a standalone directory with all the code and data necessary to produce your results.\nThis lesson has readings, an exercise, and an assessment. Feel free to jump around and do them in whatever order works best for you. I suggest the following order:\n\nRead Bryan (2017) about project-oriented workflows\nComplete the first three parts of the Exercise\nRead Bryan (2018) about version control with git and GitHub\nComplete the final fourth part of the Exercise\nComplete the Assessment\n\nBut first, watch this Tik Tok\n\n\nReadings\nThe readings will help clarify why the skills you’re learning will improve your productivity and make your science easier to share, reproduce, and collaborate on.\n\n(Bryan 2017)\n(Bryan 2018)\n\n\n\nExercise\nIn this exercise you’re going to set up an analysis to take advantage of project organization tools in RStudio, git, and GitHub. We’ll use this framework for exercises and assessments throughout the rest of the course.\n\nGoals\n\nCreate an RStudio project and git repository on your computer\nCreate a corresponding GitHub repository online\nSet up an analysis-friendly folder structure\nActivate GitHub pages to give your project a website\n\n\n\nStep 1: Create an RStudio project and git repository\nOpen RStudio. From the top menu, click on File &gt; New Project to launch the New Project Wizard.\nChoose New Directory &gt; New Project. You should now see the Create New Project prompt.\n\nThe Directory name is the name of your project. Call it “bioe215lesson1”. When it comes to project directory naming, there are a couple of best practices to follow. Stick to letters and numbers, and avoid special characters like spaces, underscores, and dashes. This ensures your directory name will be compatible with the naming requirements for R, git, and GitHub.\nNext you’ll choose where to put your project on your computer. In the screenshot above, Create project as subdirectory of: is set to /Users/frank/Documents/GitHub, which is where I keep projects on my computer. Yours may default to somewhere unhelpful. I suggest creating a subfolder in your “Documents” directory called “GitHub”, then use the “Browse…” button to navigate there.\nMake sure the check box for Create a git repository is checked.\nClick on Create Project.\n\nOnce RStudio finishes creating your project, you should see something like the screenshot above. Make sure you see both the git pane and the project name. Let the instructor know when you’re done with this step so they can check everything looks right.\n\n\nStep 2: Create a GitHub repository\nRStudio projects and git repos both live locally on your computer. GitHub repos are remote repositories on the internet. Now you’re going to create a remote GitHub repository.\nFirst, install the usethis package, which has helpful functions for project organization and management. At the R console, run install.packages(\"usethis\").\nIf you don’t have a GitHub account yet, now’s the time to create one. Go to github.com and create an account.\nMake sure git is configured on your machine to have the correct user name and email. In the Terminal pane (not the Console pane)1, run git config --list. Your user.name should be your name and user.email should be the same email you used with your GitHub account. If they’re not configured correctly, run the following R command in the Console. Change YOURNAME and YOUREMAIL accordingly. This is a one-time setup command, you won’t have to do it again until you replace your computer.\nusethis::use_git_config(user.name = \"YOURNAME\", user.email = \"YOUREMAIL\")\n[Is the double colon :: unfamiliar? This operator tells R to look for a function in a certain package. So this command uses the use_git_config() function from the usethis package. Alternatively, you can call library(usethis) and then call the function directly.]\nThe last step before you can connect RStudio to GitHub is saving your credentials. The safest way to do that is with Personal Access Tokens, or PATs. These tell GitHub you are who you say you are and prevent anyone else from messing with your remote repositories2. If you know you already have a PAT, continue to the next step. This is easy to do with usethis. Call usethis::create_github_token(), which will launch GitHub in your web browser. Give your token the name “RSTUDIO” and change the Expiration from 30 days to 90 days. Scroll all the way to the bottom and click the green Generate token button.\n\nYou should see a long line of text with a green check mark next to it. That’s your token. Copy it, then go back to RStudio. At the Console, run gitcreds::gitcreds_set(). You’ll get a prompt to ? Enter new password or token:. Paste your token and click enter. Now RStudio and GitHub can talk to each other3.\nAll that’s left to do now is creating your GitHub repo. usethis helps automate this step. First, call usethis::use_git() and commit the uncommitted files. Then call usethis::git_default_branch_rename()4. Finally, call usethis::use_github(). You should now see your GitHub repository in your browser. Once again, let the instructor know when you’re done with this step so they can check everything looks right.\n\n\nStep 3: Set up folder structure\n\n\nStep 4: Activate GitHub pages\n\n\n\nAssessment\n\nReading questions\nAnswer the following questions about the reading. After you finish step 3 of the exercise, create a markdown file in your project’s docs/ folder called comp_proj_org.md and place your answers there. Plain text is ok, or you can use Markdown.\n\nBryan (2017)\n\nWhat problems can setwd() cause in your scripts and how do RStudio projects address them?\nWhen you call rm(list=ls()), what is removed from your environment? What’s left over that restarting your R session would remove? What’s the keyboard shortcut for restarting your R session?\n\n\n\nBryan (2018)\n\nThe basic git commands are commit, push, and pull. Which one"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#additional-reading",
    "href": "lessons/01_comp_proj_org.html#additional-reading",
    "title": "Computational project organization",
    "section": "Additional reading",
    "text": "Additional reading\n(British Ecological Society and Cooper 2018)\n(Wilson et al. 2017)\n(Noble 2009)\n(Braga et al. 2023)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineer at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "about.html#max-czapanskiy",
    "href": "about.html#max-czapanskiy",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineering at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "",
    "text": "Welcome to Data Science for Eco/Evo! I’m excited to have you in class and hope this course helps you reach your research goals. On this website, you’ll find course logistics, schedule, and lessons. You’ll use GitHub for submitting assessments."
  },
  {
    "objectID": "index.html#course",
    "href": "index.html#course",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Course",
    "text": "Course\nData Science for Eco/Evo\nBIOE215, 3 Credits, Fall 2023"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Instructor",
    "text": "Instructor\nDr. Max Czapanskiy (he/they)\nEmail: mczapans@ucsc.edu"
  },
  {
    "objectID": "index.html#location",
    "href": "index.html#location",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Location",
    "text": "Location\nCoastBio 115"
  },
  {
    "objectID": "index.html#times",
    "href": "index.html#times",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Times",
    "text": "Times\nMondays, 3:30-5:30 pm"
  },
  {
    "objectID": "index.html#office-hours",
    "href": "index.html#office-hours",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Office Hours",
    "text": "Office Hours\nTimes: Thursdays 3:30-5:30 pm\nLocation: CoastBio Otter Conference Room\nOr by appointment."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Course Description",
    "text": "Course Description\nThis course will aim to be practical and provide structure for learning the computational skills most eco/evo grad students have to pick up on their own. Topics will include programming best practices in R, organizing data and computational projects, and planning for reproducibility. This is a chance to gain knowledge and experience with the nuts and bolts of making your science work in code, without trying to learn generalized linear models at the same time. The course structure will be self-directed for weeks 1-6, followed by a final project in weeks 7-10."
  },
  {
    "objectID": "about.html#max-czapanskiy-hethey",
    "href": "about.html#max-czapanskiy-hethey",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineer at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#footnotes",
    "href": "lessons/01_comp_proj_org.html#footnotes",
    "title": "Computational project organization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you can’t find the Terminal pane, ask your instructor for help. Sometimes it needs to be activated the first time you use it.↩︎\nThe internet is full of vandals. C’est la vie.↩︎\nPATs are kind of like your git configuration in that they’re “set it and forget it” commands. You will only need to update your PAT every three months if you set Expiration to 90 days. The rest of the time you don’t need to think about it. And if you’re wondering why we set PATs to expire at all, see the previous footnote about vandals.↩︎\nWe won’t cover branches in this course, but they’re an important part of version control. Suffice to say, every repo has a main branch which by default is called “master”. That’s racist terminology, so there’s a concerted effort to use “main” instead.↩︎"
  }
]