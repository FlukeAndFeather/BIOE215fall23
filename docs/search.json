[
  {
    "objectID": "lessons/01_comp_proj_org.html",
    "href": "lessons/01_comp_proj_org.html",
    "title": "Computational project organization",
    "section": "",
    "text": "Students will be able to:\n\nDescribe the relationship between RStudio project, git repo, and GitHub repo\nOrganize files and folders to maximize reproducibility and collaboration\nCreate a project website on GitHub"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#student-learning-objectives",
    "href": "lessons/01_comp_proj_org.html#student-learning-objectives",
    "title": "Computational project organization",
    "section": "",
    "text": "Students will be able to:\n\nDescribe the relationship between RStudio project, git repo, and GitHub repo\nOrganize files and folders to maximize reproducibility and collaboration\nCreate a project website on GitHub"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#todays-lesson",
    "href": "lessons/01_comp_proj_org.html#todays-lesson",
    "title": "Computational project organization",
    "section": "Today’s lesson",
    "text": "Today’s lesson\ntl;dr Each of your analyses should have a standalone directory with all the code and data necessary to produce your results.\nThis lesson has readings, an exercise, and an assessment. Feel free to jump around and do them in whatever order works best for you. I suggest the following order:\n\nRead Bryan (2017) about project-oriented workflows\nIf you’re new to git, read Bryan (2018) about version control and scientific analysis. Consider yourself familiar with git if you know what commit, push, and pull do. If that’s the case, read Braga et al. (2023) about using GitHub for managing scientific projects.\nComplete the Exercise\nComplete the Assessment\n\nBut first, watch this Tik Tok\n\n\nReadings\nThe readings will help clarify why the skills you’re learning will improve your productivity and make your science easier to share, reproduce, and collaborate on.\n\nProject workflows\n\n(Bryan 2017)\nOptionally: chapter 3 of (British Ecological Society and Cooper 2018) Organising projects for reproducibility\n\n\n\nVersion Control\n\n(Bryan 2018) if you’re new to version control\n(Braga et al. 2023) if you already have some experience\n\n\n\n\nExercise\nIn this exercise you’re going to set up an analysis to take advantage of project organization tools in RStudio, git, and GitHub. We’ll use this framework for exercises and assessments throughout the rest of the course.\n\nGoals\n\nCreate an RStudio project and git repository on your computer\nCreate a corresponding GitHub repository online\nSet up an analysis-friendly folder structure\nActivate GitHub pages to give your project a website\n\n\n\nStep 1: Create an RStudio project and git repository\nOpen RStudio. From the top menu, click on File &gt; New Project to launch the New Project Wizard.\nChoose New Directory &gt; New Project. You should now see the Create New Project prompt.\n\nThe Directory name is the name of your project. Call it “bioe215lesson1”. When it comes to project directory naming, there are a couple of best practices to follow. Stick to letters and numbers, and avoid special characters like spaces, underscores, and dashes. This ensures your directory name will be compatible with the naming requirements for R, git, and GitHub.\nNext you’ll choose where to put your project on your computer. In the screenshot above, Create project as subdirectory of: is set to /Users/frank/Documents/GitHub, which is where I keep projects on my computer. Yours may default to somewhere unhelpful. I suggest creating a subfolder in your “Documents” directory called “GitHub”, then use the “Browse…” button to navigate there.\nMake sure the check box for Create a git repository is checked.\nClick on Create Project.\n\nOnce RStudio finishes creating your project, you should see something like the screenshot above. Make sure you see both the git pane and the project name. Let the instructor know when you’re done with this step so they can check everything looks right.\n\n\nStep 2: Create a GitHub repository\nRStudio projects and git repos both live locally on your computer. GitHub repos are remote repositories on the internet. Now you’re going to create a remote GitHub repository.\nFirst, install the usethis package, which has helpful functions for project organization and management. At the R console, run install.packages(\"usethis\").\nIf you don’t have a GitHub account yet, now’s the time to create one. Go to github.com and create an account.\nMake sure git is configured on your machine to have the correct user name and email. In the Terminal pane (not the Console pane)1, run git config --list. Your user.name should be your name and user.email should be the same email you used with your GitHub account. If they’re not configured correctly, run the following R command in the Console. Change YOURNAME and YOUREMAIL accordingly. This is a one-time setup command, you won’t have to do it again until you replace your computer.\nusethis::use_git_config(user.name = \"YOURNAME\", user.email = \"YOUREMAIL\")\n[Is the double colon :: unfamiliar? This operator tells R to look for a function in a certain package. So this command uses the use_git_config() function from the usethis package. Alternatively, you can call library(usethis) and then call the function directly.]\nThe last step before you can connect RStudio to GitHub is saving your credentials. The safest way to do that is with Personal Access Tokens, or PATs. These tell GitHub you are who you say you are and prevent anyone else from messing with your remote repositories2. If you know you already have a PAT, continue to the next step. This is easy to do with usethis. Call usethis::create_github_token(), which will launch GitHub in your web browser. Give your token the name “RSTUDIO” and change the Expiration from 30 days to 90 days. Scroll all the way to the bottom and click the green Generate token button.\n\nYou should see a long line of text with a green check mark next to it. That’s your token. Copy it, then go back to RStudio. At the Console, run gitcreds::gitcreds_set(). You’ll get a prompt to ? Enter new password or token:. Paste your token and click enter. Now RStudio and GitHub can talk to each other3.\nAll that’s left to do now is creating your GitHub repo. usethis helps automate this step. First, call usethis::use_git() and commit the uncommitted files. Then call usethis::git_default_branch_rename()4. Finally, call usethis::use_github(). You should now see your GitHub repository in your browser. Once again, let the instructor know when you’re done with this step so they can check everything looks right.\n\n\nStep 3: Set up folder structure\nThere are a lot of ways you can organize a computational project. It’s less important which system you use than it is to use a system consistently. Consistency reduces headaches! In this exercise, you’re going to use a modified version of the system described by Annna Krystalli in the Organising projects for reproducibility chapter of British Ecological Society and Cooper (2018) (some of the following comes from there verbatim). Create the following folders in your project.\n\nThe data folder contains all input data (and metadata) used in the analysis.\nThe paper folder contains the manuscript.\nThe figs directory contains figures generated by the analysis.\nThe output folder contains any type of intermediate or output files (e.g. simulation outputs, models, processed datasets, etc.). You might separate this and also have a cleaned-data folder.\nThe R directory contains R scripts with function definitions.\nThe reports folder contains Quarto documents5 that describe the analysis or report on results.\nThe docs folder contains the rendered versions of the reports.\nThe scratch folder contains early prototypes and other code I don’t fully understand yet.\nThe scripts that actually do things are stored in the root directory, but if your project has many scripts, you might want to organize them in a directory of their own.\n\nHere’s an example of what your project could look like when you’re done. Notice the numbered scripts: these run the steps of your analysis in order. The rest of the folders hold the components of your analysis so they’re easy to find.\n\nThe biggest benefit of adopting this system is the cognitive space it frees up in your brain. Any brainpower you were devoting to figuring out where to put a file or where to find something can now be reallocated to your actual science.\nA quick note about data. If your raw data are small (&lt;100 MB) and you have permission to make them public6, then it’s ok to store them on GitHub. If they’re big or private, you’ll need to keep them off GitHub. That’s what the .gitignore file is for. If necessary, call usethis::use_git_ignore(\"data/*\"), which will add your data/ directory to .gitignore and keep it out of GitHub.\n\n\nStep 4: Activate GitHub pages\nGitHub has an option for creating a website out of your repository. This is an incredible feature for working with collaborators! You can put your methods and results in Quarto documents that GitHub serves for you. Compared to email threads, a project website does a much better job keeping co-authors in the loop and getting new collaborators up to speed. The folder organization system you created in Step 3 makes this pretty simple.\nLet’s start with create a simple README. GitHub will turn everything in your docs/ directory into the project website. By default, anything called “index” will be your landing page. Create a text file called docs/index.md. The “.md” suffix stands for Markdown. You’ll learn more about Markdown next week. For now, it’s enough to know Markdown is a text-only format that allows basic formatting. When you open index.md, you’ll see RStudio’s visual editor. At the top of the editor, switch from Visual to Source. Add the following text.\n# README\n\nThis is my project website for the Computational Project Organization lesson of *Data Science for Eco/Evo*.\n\nThe reading assessment answers are [here](assessment.md).\n\nMy project organization notes are [here](proj_org_notes.md).\nYour editor should look like this.\n\nHere’s what the special characters do:\n\n# creates a header\n*text* puts text in italics\n[text](url) creates a link\n\nYou’ll create assessment.md and proj_org_notes.md in the assessment.\nLet’s see it in action. First, activate Pages on GitHub. go to your GitHub repo in your browser. Click on Settings and choose Pages under Code and automation. Under Source it should say Deploy from a branch. Under Branch, change None to main and the directory from / (root) to /docs. Click Save.\nNow you need to give GitHub something to deploy. Go back to RStudio and commit all your new and changed files. To do this, go to the Git pane. You’ll see a list of new and modified files. Check the boxes next to all of them to stage the files. This tells git you’d like to commit them. Click on the Commit button to launch the Review Changes dialog and add a commit message. As a rule of thumb, keep commit messages short (&lt;50 characters). Click the Commit button, then click the Push button.\nIt will take GitHub a minute or two to render your site. Return to your GitHub repo in your browser and switch to the Actions tab. You’ll see a job running called pages build and deployment with a yellow dot next to it. Click on the job and wait for the steps to all turn green.\n\nClick on the link under deploy. Notice the url, it’s [yourgithubname].github.io/[yourreponame]. That’s the pattern GitHub pages uses. You should see your README rendered in all its glory. Call the instructor over for debugging if necessary followed by a high five.\n\n\n\nAssessment\n\nReading questions\nAnswer the following questions about the reading. Create a markdown file called docs/reading.md. Put your answers to the following questions in that file.\n\nProject workflows\nBryan (2017)\n\nWhat problems can setwd() cause in your scripts and how do RStudio projects address them?\nWhen you call rm(list=ls()), what is removed from your environment? What’s left over that restarting your R session would remove? What’s the keyboard shortcut for restarting your R session?\n\n\n\nVersion control\nYou either read Bryan (2018) or Braga et al. (2023). Answer the questions for the paper you read.\nBryan (2018)\n\nThe basic git commands are commit, push, and pull. Which commands change happen locally (i.e., on your computer)? Which happen remotely?\nWhy do diffs work for source code (e.g., .R files) but not Word documents (i.e., .docx files)?\nWhy is Markdown useful for GitHub repos?\n\nBraga et al. (2023)\n\nImagine you’re working with a few collaborators on an analysis. Come up with two examples of Issues you might open. How would using Issues differ from communicating over email?\nWhat are three ways GitHub features can promote open science practices?"
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#additional-reading",
    "href": "lessons/01_comp_proj_org.html#additional-reading",
    "title": "Computational project organization",
    "section": "Additional reading",
    "text": "Additional reading\n(Wilson et al. 2017)\n(Noble 2009)\n(Braga et al. 2023)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineer at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "about.html#max-czapanskiy",
    "href": "about.html#max-czapanskiy",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineering at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "",
    "text": "Welcome to Data Science for Eco/Evo! I’m excited to have you in class and hope this course helps you reach your research goals. On this website, you’ll find course logistics, schedule, and lessons. You’ll use GitHub for submitting assessments."
  },
  {
    "objectID": "index.html#course",
    "href": "index.html#course",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Course",
    "text": "Course\nData Science for Eco/Evo\nBIOE215, 3 Credits, Fall 2023"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Instructor",
    "text": "Instructor\nDr. Max Czapanskiy (he/they)\nEmail: mczapans@ucsc.edu"
  },
  {
    "objectID": "index.html#location",
    "href": "index.html#location",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Location",
    "text": "Location\nCoastBio 115"
  },
  {
    "objectID": "index.html#times",
    "href": "index.html#times",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Times",
    "text": "Times\nMondays, 3:30-5:30 pm"
  },
  {
    "objectID": "index.html#office-hours",
    "href": "index.html#office-hours",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Office Hours",
    "text": "Office Hours\nTimes: Thursdays 3:30-5:30 pm\nLocation: CoastBio Otter Conference Room\nOr by appointment."
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Data Science for Eco/Evo (Fall 23 BIOE215)",
    "section": "Course Description",
    "text": "Course Description\nThis course will aim to be practical and provide structure for learning the computational skills most eco/evo grad students have to pick up on their own. Topics will include programming best practices in R, organizing data and computational projects, and planning for reproducibility. This is a chance to gain knowledge and experience with the nuts and bolts of making your science work in code, without trying to learn generalized linear models at the same time. The course structure will be self-directed for weeks 1-6, followed by a final project in weeks 7-10."
  },
  {
    "objectID": "about.html#max-czapanskiy-hethey",
    "href": "about.html#max-czapanskiy-hethey",
    "title": "About",
    "section": "",
    "text": "Your instructor, Max, is a postdoc with NOAA’s Southwest Fisheries Science Center. They began their career as a software engineer at Microsoft then spent ten years as a field ecologist (seabirds, mostly) and ecological data scientist (whales, mostly). His current research is on advancing open science practices in marine ecology. But more than research, their real passion is teaching (specifically, teaching data science to biologists) so they’re grateful for the opportunity to teach Data Science for Eco/Evo this quarter! In his free time, he’s a baker, a runner, and dog drummer (that’s when you drum on the side of your dog as loud as you can).\nYou can check out their personal website at www.flukeandfeather.com."
  },
  {
    "objectID": "lessons/01_comp_proj_org.html#footnotes",
    "href": "lessons/01_comp_proj_org.html#footnotes",
    "title": "Computational project organization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you can’t find the Terminal pane, ask your instructor for help. Sometimes it needs to be activated the first time you use it.↩︎\nThe internet is full of vandals. C’est la vie.↩︎\nPATs are kind of like your git configuration in that they’re “set it and forget it” commands. You will only need to update your PAT every three months if you set Expiration to 90 days. The rest of the time you don’t need to think about it. And if you’re wondering why we set PATs to expire at all, see the previous footnote about vandals.↩︎\nWe won’t cover branches in this course, but they’re an important part of version control. Suffice to say, every repo has a main branch which by default is called “master”. That’s racist terminology, so there’s a concerted effort to use “main” instead.↩︎\n“Quarto, what’s that?” you might say. Quarto documents combine text, code, figures, and tables. They’re extremely useful for scientific analyses and writing! You’ll learn more about them next week. If you’re familiar with RMarkdown, Quarto is its next evolutionary step.↩︎\nIf you hold the rights to your data and they’re safe to put online (i.e., nothing sensitive), I strongly encourage you to make them public from the start. You might worry about getting scooped, which is understandable. But in my experience publishing datasets, it’s incredibly difficult to get other scientists to look at your data when you’re literally advertising them. In my opinion, the advantages of making data public far outweigh the risks. It facilitates collaboration and makes it easier to publish your data when you wrap up your project.↩︎"
  }
]